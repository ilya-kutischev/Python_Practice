Метоклассы это классы экземплярами которых являются классы. По сути их целью является динамическое изменение 
классов(хоть на этот случай можно использовать декораторы, но они порой могут повторяться или быть трудно используемыми). 
Существует стандартный метакласс в python - type.
Допустим появляетс возможность изменять имена атрибутов всех классов
не делая это вручную, что удобно ведь изменения ведутся сразу над всеми
классами.
метаклассы в основном применяются при создании api или работы с базами данных при помощи ORM, например Djaango orm,
используется для регистрации подклассов или валидации подклассов.
Так же позволяют использовать ООП и улучшить структуру кода, облегчить его читаемость.
преимуществом метаклассов является наследование, поскольку 
Метаклассы работают для любых подклассов, тогда как другие решения (декораторы и обычные функции) 
работают только для подклассов,
 явно оформленных или зарегистрированных. Легче изменять старые атрибуты классов или добавлять новые.
 Можно использовать для повышения безопасности кода, но могут 
возникнуть проблемы или ошибки, поэтому большинство программистов предпочитают не пользоваться ими.

единственные случаи, когда нам на самом деле действительно необходимо использовать метаклассы, - это тогда,
  когда мы хотим изменять имя класса 
или список базовых классов, потому что после определения эти параметры заносятся в класс, а декоратор
 или функция может их сломать.
Это может быть полезно в фреймворках для выдачи предупреждений всякий раз, когда определены классы с
 похожими именами или неполными деревьями наследования, но в основном нет причины
 для фактического изменения этих значений.
И, наконец, метаклассы классные, а программирование должно доставлять удовольствие.
 Постоянное использование стандартных программных конструкций и шаблонов проектирования
 скучно и мешает воображению.