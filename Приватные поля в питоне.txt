Python не имеет механизма, который эффективно ограничивает доступ к какой-либо переменной
 или методу экземпляра. Python предписывает соглашение о префиксе имени переменной или метода
 одинарным или двойным подчеркиванием для имитации поведения спецификаторов защищенного (privat) доступа.
Двойное подчеркивание __перед переменной делает ее закрытой . Это обозначение переменной настоятельно рекомендует
 не изменять её извне. Любая попытка сделать это приведет к ошибке AttributeError.
Python выполняет изменение имен частных переменных. Каждый член с двойным подчеркиванием будет заменен
 на _объект._класс__переменная. Таким образом, к нему все еще можно получить доступ извне,
 но от такой практики следует воздерживаться.
и хоть вы можете обозначить, что переменная или метод являются закрытыми, поставив перед ними знак подчеркивания,
но если вамвсё же кажется, что этого недостаточно, вы всегда можете использовать property декоратор.
def __init__(self, i):
        self._i = i
class Example:
    @property
    def func()
	return self._i
Таким образом, кто-то или что-то, на что ссылается, i на самом деле ссылается на возвращаемое значение  i функции,
 а не на саму переменную, и поэтому к нему можно получить доступ, но не изменить. Однако, если кто-то 
действительно этого хочет, он может просто использовать _i и присвоить ему новое значение. 
На самом деле, нет надежного способа предотвратить доступ кого-либо к переменным и методам, 
которые мы хотитм скрыть. Однако использование property- это самое четкое сообщение, 
которое мы можем отправить, о том что переменная не подлежит редактированию. property также может 
использоваться для более сложных путей доступа для установки или удаления.